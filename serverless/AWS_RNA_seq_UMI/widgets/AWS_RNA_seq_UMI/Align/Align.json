{"name": "Align", "description": "Setup and launch lambda functions", "docker_image_name": "biodepot/lambda_umi_align", "docker_image_tag": "1.16.272__python_3.8.0__alpine-3.10__eb9900cb", "priority": "10", "icon": null, "inputs": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["ExecTrigger", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["DataTrigger", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["RefTrigger", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["DeployTrigger", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["credentials_dir", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["bucket_name", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["region", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["work_dir", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["cloud_aligns_dir", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["function_name", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["topic_name", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["symfile", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["ercc", {"callback": null, "type": {"py/type": "builtins.str"}}]}]}]}, "outputs": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["bucket_name", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["credentials_dir", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["topic_name", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["recv_topic", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["recv_subscription", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["function_name", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["work_dir", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["markmultihits", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["properPairs", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["marknonrefseq", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["samegenenotmulti", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["nbins", {"default": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["binsize", {"default": null, "type": {"py/type": "builtins.str"}}]}]}]}, "volumes": null, "ports": null, "parameters": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["bucket_name", {"default": "dtoxsbucket", "flag": "-b ", "label": "S3 bucket", "type": "str"}]}, {"py/tuple": ["credentials_dir", {"default": "/data/.aws", "flag": "-c ", "label": "AWS credentials directory", "type": "directory"}]}, {"py/tuple": ["region", {"default": "us-east-1", "flag": "--region  ", "label": "Region", "type": "str"}]}, {"py/tuple": ["topic_name", {"default": "dtoxspubsub", "flag": "-t ", "label": "PubSub topic", "type": "str"}]}, {"py/tuple": ["recv_topic", {"default": "dtoxsrecv", "flag": "-r ", "label": "Finished execution topic", "type": "str"}]}, {"py/tuple": ["recv_subscription", {"default": "dtoxssubscription", "flag": "-s ", "label": "Finished execution queue", "type": "str"}]}, {"py/tuple": ["function_name", {"default": "dtoxsfunction", "flag": "--fn ", "label": "Function name", "type": "str"}]}, {"py/tuple": ["fastq_suffix", {"default": "fq", "flag": "--fastq_suffix", "label": "Fastq file suffix", "type": "str"}]}, {"py/tuple": ["work_dir", {"default": "dtoxsdir", "flag": "-w ", "label": "Cloud working directory", "type": "str"}]}, {"py/tuple": ["cloud_aligns_dir", {"default": "", "flag": "--aligns ", "label": "Cloud aligns directory", "type": "str"}]}, {"py/tuple": ["upload_dir", {"default": "saf", "flag": "--uploadDir", "label": "S3 directory to store hashes", "type": "str"}]}, {"py/tuple": ["max_workers", {"default": 16, "flag": "--max_workers", "label": "Max threads for pubsub:", "type": "int"}]}, {"py/tuple": ["align_timeout", {"default": 240, "flag": "--align_timeout", "label": "Max  time to produce final output", "type": "int"}]}, {"py/tuple": ["start_timeout", {"default": 60, "flag": "--start_timeout", "label": "Max time to start function", "type": "int"}]}, {"py/tuple": ["finish_timeout", {"default": 200, "flag": "--finish_timeout", "label": "Max time to complete alignment", "type": "int"}]}, {"py/tuple": ["bwa_n", {"default": "0.04", "flag": null, "label": "Max #diff or missing prob under 0.02 err rate", "type": "str", "env": "bwa_n"}]}, {"py/tuple": ["bwa_o", {"default": 1, "flag": null, "label": "Maximum number or fraction of gap opens", "type": "int", "env": "bwa_o"}]}, {"py/tuple": ["bwa_e", {"default": -1, "flag": null, "label": "Max gap extensions (-1 disable long gaps)", "type": "int", "env": "bwa_e"}]}, {"py/tuple": ["bwa_i", {"default": 5, "flag": null, "label": "No indel within INT bp of ends", "type": "int", "env": "bwa_i"}]}, {"py/tuple": ["bwa_d", {"default": 10, "flag": null, "label": "Max occurrences for extending long deletion", "type": "int", "env": "bwa_d"}]}, {"py/tuple": ["bwa_l", {"default": 32, "flag": null, "label": "Seed length", "type": "int", "env": "bwa_l"}]}, {"py/tuple": ["bwa_k", {"default": 2, "flag": null, "label": "Max differences in seed", "type": "int", "env": "bwa_k"}]}, {"py/tuple": ["bwa_m", {"default": 2000000, "flag": null, "label": "Max entries in queue", "type": "int", "env": "bwa_m"}]}, {"py/tuple": ["bwa_t", {"default": 1, "flag": null, "label": "BWA threads", "type": "int", "env": "bwa_t"}]}, {"py/tuple": ["bwa_M", {"default": 3, "flag": null, "label": "Mismatch penalty", "type": "int", "env": "bwa_M"}]}, {"py/tuple": ["bwa_O", {"default": 11, "flag": null, "label": "Gap open penalty", "type": "int", "env": "bwa_O"}]}, {"py/tuple": ["bwa_E", {"default": 4, "flag": null, "label": "Gap extension penalty", "type": "int", "env": "bwa_E"}]}, {"py/tuple": ["bwa_R", {"default": 20, "flag": null, "label": "Stop searching after INT equally best hits", "type": "int", "env": "bwa_R"}]}, {"py/tuple": ["bwa_q", {"default": 0, "flag": null, "label": "Quality threshold for read trimming down to 35 bp", "type": "int", "env": "bwa_q"}]}, {"py/tuple": ["bwa_L", {"flag": null, "label": "Log-scaled penalty for long deletions", "type": "bool", "env": "bwa_L"}]}, {"py/tuple": ["bwa_N", {"flag": null, "label": "Non-iterative mode (sloooow)", "type": "bool", "env": "bwa_N"}]}, {"py/tuple": ["markmultihits", {"flag": "-M ", "label": "Keep track of reads that map to multiple genes", "type": "bool", "env": "markmultihits"}]}, {"py/tuple": ["properPairs", {"flag": "-P ", "label": "Only count reads with proper pairing (paired-end reads)", "type": "bool", "env": "properPairs"}]}, {"py/tuple": ["marknonrefseq", {"flag": "-u ", "label": "Keep track of genes not in sym2ref file", "type": "bool", "env": "markNonRefseq"}]}, {"py/tuple": ["samegenenotmulti", {"flag": "-S ", "label": "Multiple hits to same gene treated as unique hit", "type": "bool", "env": "samegenenotmulti"}]}, {"py/tuple": ["nbins", {"default": 16, "flag": "-n  ", "label": "Number of bins to store gene position (bits)", "type": "int", "env": "nbins"}]}, {"py/tuple": ["binsize", {"default": 0, "flag": "-p ", "label": "Gene position binned (bits)", "type": "int"}]}, {"py/tuple": ["symfile", {"flag": "--symfile ", "label": "Transcript to gene name file", "type": "file", "env": "symfile"}]}, {"py/tuple": ["ercc", {"flag": "--ercc ", "label": "ERCC file", "type": "file", "env": "ercc"}]}, {"py/tuple": ["barcodesize", {"default": 6, "flag": "--barcodesize  ", "label": "Barcode size (bp)", "type": "int", "env": "barcodesize"}]}, {"py/tuple": ["umisize", {"default": 10, "flag": "--umisize   ", "label": "UMI size (bp)", "type": "int", "env": "umisize"}]}]}]}, "command": ["setupAWS.py "], "autoMap": true, "runDockerMap": null, "persistentSettings": "all", "requiredParameters": ["bucket_name", "credentials_dir", "region", "cloud_aligns_dir", "symfile"]}